/* eslint-disable no-unused-vars */
"use server";

import { GoogleGenerativeAI } from "@google/generative-ai";

const apiKey = process.env.GEMINI_API_KEY as string;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
};

export async function createQuiz(prevQuestionResponse?: any, isLastQuestion?: boolean, prevResponses?: any) {
    try {
        let topic = "NEXT JS 15"; // to be replaced with actual topic taken from user input
        let defaultPrompt = "DESCRIPTION: Create a quiz question on the given topic. On the basis of description please give me a form in json format, but dont write ```json in you answer directly give the object{}. Please respond with only one question, and make sure to include the correct answer. It must also have 4 options but dont name it and the correct answer must be one of them along with form field, form label, form name, placeholder name, for each input. Please try to increase the difficulty as much as possible but also if furhter I give you an answered question as PREVIOUS RESPONSE, you have to give me the next question with increased difficulty level if the previous response is correct, otherwise, you have to decrease the difficulty level. And NEVER give repeated or nearly same questions from the previous responses given by me or already generated by you. All the questions must be unqiue and must not match anything in the PREVIOUS RESPONSE given furhter by me. For Each Question The Format must be as { form: { question: \" The Question Here \", options: [{ value: \" Option Value \", isCorrectAnswer: boolean  }] }, generatedByDefaultOrFromPrevResponses: \" The corresponding value here \" }. I will give the previously answered question by the student as an Object as { answeredData:{answer: \"Answered Value\", isAnswerCorrect: boolean}, question: questionString, options: [{ value: \"Option's Value\", isCorrectAnswer: boolean }] }}. HEY YOU ARE RESPONDING WITH SAME QUESTIONS AGAIN AND AGAIN, PLEASE GIVE ME A NEW QUESTION EVERY TIME AND COVER ALL THE CONCEPTS OF THE TOPIC, AND NEVER EVER GIVE ME A REPEATED QUESTION, WHICH IS PRESENT IN FOLLOWING 'PREVIOUS RESPONSE' OR ALREADY GENERATED BY YOU.";
        let prompt = `TOPIC: ${topic} ${defaultPrompt}`;
        // let prevResponses = prevQuestionResponse ? "PREVIOUS RESPONSE: " + JSON.stringify(prevQuestionResponse) : "";
        // prompt = `${prompt} ${prevResponses}`;
        // let res = "";
        // if (isLastQuestion) {
        //     let prompt2 = "GENERATE SCORE: Please provide the score of the student in percentage and in brackets (noOfCorrectlyAnswered/totalAttempted) and give some insights about how well they did in the quiz. Provide insights into their strengths, areas of improvement, and overall comprehension. Consider the student's performance metrics, engagement. Suggest personalized recommendations for optimizing learning strategies, addressing challenges, and enhancing future academic success. And Respond as if you are directly telling to the student. PREVIOUS RESPONSE: " + JSON.stringify(prevResponses);
        //     const resultsession = model.startChat({
        //         generationConfig,
        //     });
        //     const res2 = await resultsession.sendMessage(prompt2);
        //     res = JSON.parse(res2.response.text());
        //     return {
        //         status: 205,
        //         message: res,
        //     };
        // }
        // prevResponses = prevResponses ? "PREVIOUS RESPONSE: " + JSON.stringify(prevResponses) : "";
        // const quizSession = model.startChat({
        //     generationConfig,
        //     history: [{
        //         role: "user",
        //         parts: [{
        //             text: prompt,
        //         }],
        //     }, {
        //         role: "model",
        //         parts: [{
        //             text: prevResponses,
        //         }],
        //     }],

        // });
        // const result = await quizSession.sendMessage(prompt);
        const result = await model.generateContent(prompt);
        console.log(result.response.candidates[0].content.parts[0].text);
        return {
            status: 200,
            data: JSON.parse(result.response.candidates[0].content.parts[0].text),
        };
    }
    catch (e: any) {
        return {
            status: 500,
            message: e.message,
        };
    }
}